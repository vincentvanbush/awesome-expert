//created on: 2014-12-29
//package com.sample

//list any import classes here.
import com.control.Religion;
import com.control.Question;
import com.control.ReligionName;
import com.control.QuestionType;
import com.control.Message;
import com.control.Message.MessageType;
import com.control.Hit;
import com.control.Answer;
import com.control.QuestionCounter;
import java.util.ArrayList;

global Religion glTopReligion;
global ArrayList<Object> glAnswers;
global Question glQuestion;

function Religion topReligion(ArrayList $r) {
	ArrayList<Religion> rels = (ArrayList<Religion>) $r;
	java.util.Collections.sort(rels);
	return rels.get(0);
}

rule "Init religions"
	when
	then
		insert(new Religion(ReligionName.CHRISTIANITY));
		insert(new Religion(ReligionName.ISLAM));
		insert(new Religion(ReligionName.JUDAISM));
		insert(new Religion(ReligionName.BUDDHISM));
		insert(new Religion(ReligionName.HINDUISM));
		insert(new Religion(ReligionName.BAHAISM));
		insert(new Religion(ReligionName.SIKHISM));
		insert(new Religion(ReligionName.JAINISM));
		insert(new Religion(ReligionName.CONFUCIANISM));
		insert(new Religion(ReligionName.TAOISM));
		insert(new Religion(ReligionName.SHINTO));
		insert(new Religion(ReligionName.ZOROASTRIANISM));
		//NO ATHEISM
		
end

rule "Init questions"
    when
        //conditions
    then
    	// Initial phase questions (for all religions)
        insert(new Question(QuestionType.NUMBER_OF_GODS_TO_BELIEVE, new Object[] {"one/one", "one/many", "many", "none"}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.CARE_ABOUT_GODS_EXISTENCE, 	new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.HUMAN_FORM_OF_GOD, 			new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.CARE_ABOUT_HELL_EXISTENCE, 	new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.CARE_ABOUT_HEAVEN_EXISTENCE, 	new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));      
        insert(new Question(QuestionType.BELIEF_IN_REINCARNATION, 		new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.NESSESITY_OF_PRAYER, 			new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
		insert(new Question(QuestionType.NESSESITY_OF_MEDITATION, 		new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.ACCEPTANCE_LEVEL_OF_HOMOSEXUALITY, 	new Object[] {0,1,2}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.ACCEPTANCE_LEVEL_OF_ABORTION, 			new Object[] {0,1,2}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.ACCEPTANCE_LEVEL_OF_EUTHANASIA, 		new Object[] {0,1,2}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.RESTRICTIONS_OF_SEXUALITY, new Object[] {true, false}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.VIEW_OF_POLYGAMY, new Object[] {0, 1, 2}, new ReligionName[] {ReligionName.ALL}));
        
        // Next questions connected with all religions
        // If needed to ask in second phase, remove ReligionName.ALL and insert all religions one by one 
        insert(new Question(QuestionType.MANIFESTATION_IN_DOCTRINAL_DIMENSION, new Object[] {1, 2, 3, 4}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.MANIFESTATION_BY_RITUALS, new Object[] {1, 2, 3, 4}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.SOCIAL_ORGANISATIONAL_SIDE, new Object[] {1, 2, 3, 4}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.INDIVIDUAL_SPIRITUALITY, new Object[] {1, 2, 3, 4}, new ReligionName[] {ReligionName.ALL}));
        
        insert(new Question(QuestionType.NUMBER_OF_FOLLOWERS, new Object[] {"over_1_mld", "over_100_mln", "over_10_mln", "over_1_mln", "under_1_mln"}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.TIME_OF_EXISTANCE, new Object[] {"over_30_ages", "over_15_ages", "over_5_ages", "under_5_ages"}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.PROCEEDINGS_WITH_DEAD, new Object[] {"burial", "cremation"}, new ReligionName[] {ReligionName.ALL}));
        
        // Secondary phase questions (for specific sets of religions)
        insert(new Question(QuestionType.OBLIGATION_OF_PRAYER, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.ISLAM}));
        insert(new Question(QuestionType.PROHIBITION_FOR_ALCOHOL, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.ISLAM, ReligionName.SIKHISM, ReligionName.BUDDHISM, ReligionName.BAHAISM}));
        insert(new Question(QuestionType.PROHIBITION_FOR_PORK, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.ISLAM, ReligionName.JUDAISM}));
        insert(new Question(QuestionType.NEED_OF_PILGRIMAGE, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.ISLAM}));
        insert(new Question(QuestionType.LACTOVEGETARIAN_DIET, new Object [] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.HINDUISM, ReligionName.SIKHISM, ReligionName.JAINISM, ReligionName.BUDDHISM}));
        insert(new Question(QuestionType.PROHIBITION_FOR_BEEF, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.HINDUISM}));
        insert(new Question(QuestionType.CIRCUMCISION, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.JUDAISM}));
        insert(new Question(QuestionType.FAST, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.BAHAISM, ReligionName.CHRISTIANITY}));
        insert(new Question(QuestionType.KOSHER, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.JUDAISM}));
        insert(new Question(QuestionType.HOME_ALTAR, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.SHINTO}));
        insert(new Question(QuestionType.NECESSITY_OF_GIFT, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.SHINTO}));
        insert(new Question(QuestionType.ANTHROPOMORPHIC_GODS, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.SHINTO}));
        insert(new Question(QuestionType.FRUITARIAN_DIET, new Object[] {new Boolean(true), new Boolean(false)}, new ReligionName[] {ReligionName.JAINISM})); 
               
        insert(new Message(MessageType.INITIAL_PHASE));
        insert(new Message(MessageType.INITIAL_PHASE_QUESTION));    
end

rule "When entering second phase insert counter"
	when
		Message( type == MessageType.SECOND_PHASE )
		not QuestionCounter(  )
	then
		System.err.println("Entering second phase - inserted question counter");
		insert(new QuestionCounter());
end

rule "Choose initial phase question and open the corresponding window"
	when
		m: Message( type == MessageType.INITIAL_PHASE_QUESTION )
		exists Question( active == false, religions contains ReligionName.ALL )
		$questions : ArrayList() from collect( Question( active == false, religions contains ReligionName.ALL ) )

	then
		retract(m);
		Question question = (Question)($questions.get(0));
		System.err.println("[Asking question] " + question.getType());
		new com.windows.QuestionWindow(kcontext, question, question.getAnswers()).show();
end
/*
rule "Increment counter"
	when
		m: Message( type == MessageType.INCREMENT_COUNTER )
		$counter : QuestionCounter()
	then
		System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
		retract(m);
		$counter.increment();
		update($counter);
end
*/

rule "When there is no question that has not yet been asked, terminate"
	when
		m1: Message( type == MessageType.SECOND_PHASE )
		m: Message( type == MessageType.SECOND_PHASE_QUESTION )
		not Question( active == false )
		$r: Religion( top== true )
	then
		retract(m);
		System.err.println("[No unasked questions left] Top hit is: " + $r.getReligionName());
end

rule "Choose any other second phase question for the top religion if no question fits the best one"
	when
		m1: Message( type == MessageType.SECOND_PHASE )
		m: Message( type == MessageType.SECOND_PHASE_QUESTION )
		$r: Religion( top == true )
		not Question( active == false, religions contains $r.religionName )
		$questions : ArrayList() from collect ( Question( active == false ) ) // 
	then
		retract(m);
		Question question = (Question)($questions.get(0));
		System.err.println("[Asking 2nd phase question - specific for another] for religion: " + $r.getReligionName() + " / " + question.getType());
		new com.windows.QuestionWindow(kcontext, question, question.getAnswers()).show();
end

rule "Choose second phase question for the top religion"
	when
		m1: Message( type == MessageType.SECOND_PHASE )
		m: Message( type == MessageType.SECOND_PHASE_QUESTION )
		$r: Religion( top == true )
		exists Question( active == false, religions contains $r.religionName )
		$questions : ArrayList() from collect ( Question( active == false, religions contains $r.religionName ) )
	then
		retract(m);
		Question question = (Question)($questions.get(0));
		System.err.println("[Asking 2nd phase question - specific] for religion: " + $r.getReligionName() + " / " + question.getType());
		new com.windows.QuestionWindow(kcontext, question, question.getAnswers()).show();
end


rule "When no initial phase questions left"
	when
		m1: Message( type == MessageType.INITIAL_PHASE )
		m: Message( type == MessageType.INITIAL_PHASE_QUESTION )
		not Question( active == false, religions contains ReligionName.ALL )
	then
		System.err.println("--- End of the initial phase. Now evaluate the best option");
		retract(m);
		retract(m1);
		//insert(new Message(MessageType.SECOND_PHASE));
		insert(new Message(MessageType.EVALUATE_BEST));
end

rule "When getting an answer, retract the corresponding question"
	when
		$answer : Answer()
	then
		System.err.println("[Answer] " + $answer.getQuestionType() + " " + $answer.getContent());
		retract($answer.getQuestion());
end

rule "When getting an answer, in the initial phase, ask for next initial phase question"
	when
		$answer : Answer()
		Message( type == MessageType.INITIAL_PHASE )
	then
		insert(new Message(MessageType.INITIAL_PHASE_QUESTION));
		
end

rule "When getting an answer, in the second phase, ask for next second phase question and increment counter"
	when
		$answer : Answer()
		Message( type == MessageType.SECOND_PHASE )
		$counter: QuestionCounter( value < 2 )
	then
		insert(new Message(MessageType.SECOND_PHASE_QUESTION));
		$counter.increment();
		update($counter);
		retract($answer);
end

rule "When getting an answer, in the second phase, handle overflown counter"
	when
		$answer : Answer()
		Message( type == MessageType.SECOND_PHASE )
		$counter : QuestionCounter( value >= 2 )
	then
		insert(new Message(MessageType.EVALUATE_BEST));
		$counter.reset();
		update($counter);
		retract($answer);
end
/*
rule "When getting an answer, in the second phase, if counter is over, evaluate best fit"
	when
		$answer : Answer()
		Message( type == MessageType.SECOND_PHASE )
		$counter: QuestionCounter( value >= 3 )
	then
		$counter.reset();
		insert(new Message(MessageType.EVALUATE_BEST));
end
*/
rule "When hit"
	when
		h: Hit( hitType : type )
		r: Religion( religionName == h.religionName )
	then
		System.out.println(h.getReligionName() + " " + h.getType() + ", because " + h.getCause().toString());
		retract(h);
		r.update(hitType);
		update(r);
end

rule "When user tells to remove top choice religion, retract it"
	when
		m : Message( type == MessageType.RETRACT_TOP_RELIGION )
		$r : ArrayList() from collect ( Religion( ratio >= 1.0 ) )
	then
		System.err.println("[Retracting top choice]");
		retract(m);
		retract(topReligion($r));
		insert(new Message(MessageType.EVALUATE_BEST));
end


rule "When ordered the evaluation of best fit ratio, ask the user if it is what he wants"
	when
		m1 : Message( type == MessageType.EVALUATE_BEST )
		$r : ArrayList() from collect ( Religion( ratio >= 1.0 ) )
	then
		for (Object rel : $r) {
			System.out.println(((Religion)rel).getReligionName());
		}
		retract(m1);
		Religion topRel = topReligion($r);
		for (Object rel : $r) ((Religion)rel).setTop(false);
		topRel.setTop(true);
		update(topRel);
		System.err.println("[Top choice] " + topRel.getRatio() + " : " + topRel.getReligionName());
		new com.windows.ConclusionWindow(kcontext, topRel).show();
end
