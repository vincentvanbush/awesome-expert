//created on: 2014-12-29
//package com.sample

//list any import classes here.
import com.control.Religion;
import com.control.Question;
import com.control.ReligionName;
import com.control.QuestionType;
import com.control.Message;
import com.control.Message.MessageType;
import com.control.Hit;
import com.control.Answer;
import java.util.ArrayList;

global Religion glTopReligion;
global ArrayList<Object> glAnswers;
global Question glQuestion;

function Religion topReligion(ArrayList $r) {
	ArrayList<Religion> rels = (ArrayList<Religion>) $r;
	java.util.Collections.sort(rels);
	return rels.get(0);
}

rule "Init religions"
	when
	then
		insert(new Religion(ReligionName.CHRISTIANITY));
		insert(new Religion(ReligionName.ISLAM));
		insert(new Religion(ReligionName.JUDAISM));
		insert(new Religion(ReligionName.BUDDHISM));
		insert(new Religion(ReligionName.HINDUISM));
		insert(new Religion(ReligionName.BAHAISM));
		insert(new Religion(ReligionName.SIKHISM));
		insert(new Religion(ReligionName.JAINISM));
		insert(new Religion(ReligionName.CONFUCIANISM));
		insert(new Religion(ReligionName.TAOISM));
		insert(new Religion(ReligionName.SHINTO));
		insert(new Religion(ReligionName.ZOROASTRIANISM));
end

rule "Init questions"
    when
        //conditions
    then
    	// Initial phase questions (for all religions)
        insert(new Question(QuestionType.NUMBER_OF_GODS_TO_BELIEVE, new Object[] {"one/one", "one/many", "many", "none"}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.CARE_ABOUT_GODS_EXISTENCE, 	new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.HUMAN_FORM_OF_GOD, 			new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.CARE_ABOUT_HELL_EXISTENCE, 	new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.CARE_ABOUT_HEAVEN_EXISTENCE, 	new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));      
        insert(new Question(QuestionType.BELIEF_IN_REINCARNATION, 		new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.NESSESITY_OF_PRAYER, 			new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
		insert(new Question(QuestionType.NESSESITY_OF_MEDITATION, 		new Object[] {new Boolean(true), new Boolean(false)}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.ACCEPTANCE_LEVEL_OF_HOMOSEXUALITY, 	new Object[] {0,1,2}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.ACCEPTANCE_LEVEL_OF_ABORTION, 			new Object[] {0,1,2}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.ACCEPTANCE_LEVEL_OF_EUTHANASIA, 		new Object[] {0,1,2}, 	new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.RESTRICTIONS_OF_SEXUALITY, new Object[] {true, false}, new ReligionName[] {ReligionName.ALL}));
        insert(new Question(QuestionType.VIEW_OF_POLYGAMY, new Object[] {0, 1, 2}, new ReligionName[] {ReligionName.ALL}));
        
        // Secondary phase questions (for specific sets of religions)
        insert(new Question(QuestionType.FOO, new Object[] {"dupa", "kupa"}, new ReligionName[] {ReligionName.SIKHISM}));
        insert(new Question(QuestionType.BAR, new Object[] {"ab", "cd"}, new ReligionName[] {ReligionName.SIKHISM}));
        insert(new Question(QuestionType.FIZZ, new Object[] {true, false}, new ReligionName[] {ReligionName.SIKHISM}));
        insert(new Question(QuestionType.BUZZ, new Object[] {0,1,2}, new ReligionName[] {ReligionName.SIKHISM}));
        
        
        insert(new Message(MessageType.INITIAL_PHASE));
        insert(new Message(MessageType.INITIAL_PHASE_QUESTION));    
end

rule "Choose initial phase question and open the corresponding window"
	when
		m: Message( type == MessageType.INITIAL_PHASE_QUESTION )
		exists Question( active == false, religions contains ReligionName.ALL )
		$questions : ArrayList() from collect( Question( active == false, religions contains ReligionName.ALL ) )

	then
		retract(m);
		Question question = (Question)($questions.get(0));
		System.err.println("[Asking question] " + question.getType());
		new com.windows.QuestionWindow(kcontext, question, question.getAnswers()).show();
end

rule "Choose second phase question and open the corresponding window"
	when
		m1: Message( type == MessageType.SECOND_PHASE )
		m: Message( type == MessageType.SECOND_PHASE_QUESTION )
		$r: Religion( top == true )
		exists Question( active == false, religions contains $r.religionName )
		$questions : ArrayList() from collect ( Question( active == false, religions contains $r.religionName ) )
	then
		retract(m);
		Question question = (Question)($questions.get(0));
		System.err.println("[Asking 2nd phase question] for religion: " + $r.getReligionName() + " / " + question.getType());
		new com.windows.QuestionWindow(kcontext, question, question.getAnswers()).show();
		
end

rule "When no initial phase questions left"
	when
		m1: Message( type == MessageType.INITIAL_PHASE )
		m: Message( type == MessageType.INITIAL_PHASE_QUESTION )
		not Question( active == false, religions contains ReligionName.ALL )
	then
		System.err.println("--- End of the initial phase. Now evaluate the best option");
		retract(m);
		retract(m1);
		//insert(new Message(MessageType.SECOND_PHASE));
		insert(new Message(MessageType.EVALUATE_BEST));
end

rule "When getting an answer, retract the corresponding question"
	when
		$answer : Answer()
	then
		System.err.println("[Answer] " + $answer.getQuestionType() + " " + $answer.getContent());
		retract($answer.getQuestion());
end

rule "When getting an answer, in the initial phase, ask for next initial phase question"
	when
		$answer : Answer()
		Message( type == MessageType.INITIAL_PHASE )
	then
		insert(new Message(MessageType.INITIAL_PHASE_QUESTION));
end

rule "When getting an answer, in the second phase, ask for next second phase question"
	when
		$answer : Answer()
		Message( type == MessageType.SECOND_PHASE )
	then
		insert(new Message(MessageType.SECOND_PHASE_QUESTION));
end

rule "When hit"
	when
		h: Hit( hitType : type )
		r: Religion( religionName == h.religionName )
	then
		System.out.println(h.getReligionName() + " " + h.getType() + ", because " + h.getCause().toString());
		retract(h);
		r.update(hitType);
		update(r);
end

rule "When user tells to remove top choice religion, retract it"
	when
		m : Message( type == MessageType.RETRACT_TOP_RELIGION )
		$r : ArrayList() from collect ( Religion( ratio >= 3.0 ) )
	then
		System.err.println("[Retracting top choice]");
		retract(m);
		retract(topReligion($r));
		insert(new Message(MessageType.SECOND_PHASE_QUESTION));
end

rule "When ordered the evaluation of best fit ratio, ask the user if it is what he wants"
	when
		m1 : Message( type == MessageType.EVALUATE_BEST )
		$r : ArrayList() from collect ( Religion( ratio >= 3.0 ) )
	then
		retract(m1);
		Religion topRel = topReligion($r);
		topRel.setTop(true);
		update(topRel);
		System.err.println("[Top choice] " + topRel.getRatio() + " : " + topRel.getReligionName());
		new com.windows.ConclusionWindow(kcontext, topRel).show();
end
